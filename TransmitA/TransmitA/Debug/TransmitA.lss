
TransmitA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000004b0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800072  00800072  00000556  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000890  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070e  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f7  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000115  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8a:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZL12uart_putcharcP6__file>:
	return UDR; // Read the received character from UDR
}

static int
uart_putchar(char c, FILE *stream)
{
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	if (c == '\n')
  96:	8a 30       	cpi	r24, 0x0A	; 10
  98:	19 f4       	brne	.+6      	; 0xa0 <_ZL12uart_putcharcP6__file+0xe>
	uart_putchar('\r', stream);
  9a:	8d e0       	ldi	r24, 0x0D	; 13
  9c:	0e 94 49 00 	call	0x92	; 0x92 <_ZL12uart_putcharcP6__file>
	while ((UCSRA & (1<<UDRE)) == 0x00);
  a0:	5d 9b       	sbis	0x0b, 5	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <_ZL12uart_putcharcP6__file+0xe>
	UDR = c;
  a4:	cc b9       	out	0x0c, r28	; 12
	return 0;
}
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <_Z9UART_initv>:
#define F_CPU 1000000UL
#endif

void UART_init(){
	// Normal speed, disable multi-proc
	UCSRA = 0b00000010;
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8b b9       	out	0x0b, r24	; 11
	// Enable Tx and Rx, disable interrupts
	UCSRB = 0b00011000;
  b2:	88 e1       	ldi	r24, 0x18	; 24
  b4:	8a b9       	out	0x0a, r24	; 10
	// Asynchronous mode, no parity, 1 stop bit, 8 data bits
	UCSRC = 0b10000110;
  b6:	86 e8       	ldi	r24, 0x86	; 134
  b8:	80 bd       	out	0x20, r24	; 32
	// Baud rate 1200bps, assuming 1MHz clock
	UBRRL = 12;//0x33;
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00;
  be:	10 bc       	out	0x20, r1	; 32
  c0:	08 95       	ret

000000c2 <_Z9UART_sendh>:
}

void UART_send(unsigned char data){
	// wait until UDRE flag is set to logic 1
	while ((UCSRA & (1<<UDRE)) == 0x00);
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <_Z9UART_sendh>
	UDR = data; // Write character to UDR for transmission
  c6:	8c b9       	out	0x0c, r24	; 12
  c8:	08 95       	ret

000000ca <_Z12UART_receivev>:
}

unsigned char UART_receive(void){
	// Wait until RXC flag is set to logic 1
	while ((UCSRA & (1<<RXC)) == 0x00);
  ca:	5f 9b       	sbis	0x0b, 7	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <_Z12UART_receivev>
	return UDR; // Read the received character from UDR
  ce:	8c b1       	in	r24, 0x0c	; 12
}
  d0:	08 95       	ret

000000d2 <main>:
#include <util/delay.h>
#include "uart.c"

int main(void)
{
	DDRD = 0xFF;
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	81 bb       	out	0x11, r24	; 17
	unsigned char i;
	UART_init(); // initialise UART
  d6:	0e 94 57 00 	call	0xae	; 0xae <_Z9UART_initv>
	stdout = fdevopen(uart_putchar, NULL);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	89 e4       	ldi	r24, 0x49	; 73
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 97 00 	call	0x12e	; 0x12e <fdevopen>
  e6:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x3>
  ea:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end+0x2>
		UART_send(i); //To send a character
		printf("AT+ROLE=1\r\n"); //Directly printf through uart
		unsigned char c = UART_receive();
		if (c == 'O' || c=='K')
		{
			PORTD = 0xFF;
  ee:	df ef       	ldi	r29, 0xFF	; 255
	DDRD = 0xFF;
	unsigned char i;
	UART_init(); // initialise UART
	stdout = fdevopen(uart_putchar, NULL);
	while (1) {
		UART_send(i); //To send a character
  f0:	8c 2f       	mov	r24, r28
  f2:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z9UART_sendh>
		printf("AT+ROLE=1\r\n"); //Directly printf through uart
  f6:	86 e6       	ldi	r24, 0x66	; 102
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <puts>
		unsigned char c = UART_receive();
  fe:	0e 94 65 00 	call	0xca	; 0xca <_Z12UART_receivev>
		if (c == 'O' || c=='K')
 102:	8b 7f       	andi	r24, 0xFB	; 251
 104:	8b 34       	cpi	r24, 0x4B	; 75
 106:	51 f4       	brne	.+20     	; 0x11c <main+0x4a>
		{
			PORTD = 0xFF;
 108:	d2 bb       	out	0x12, r29	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f e7       	ldi	r18, 0x7F	; 127
 10c:	8a e1       	ldi	r24, 0x1A	; 26
 10e:	96 e0       	ldi	r25, 0x06	; 6
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x3e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x48>
 11a:	00 00       	nop
			_delay_ms(2000);
		}
		PORTD = 0;
 11c:	12 ba       	out	0x12, r1	; 18
 11e:	87 ea       	ldi	r24, 0xA7	; 167
 120:	91 e6       	ldi	r25, 0x61	; 97
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x50>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x56>
 128:	00 00       	nop
		_delay_ms(100);
		i++;
 12a:	cf 5f       	subi	r28, 0xFF	; 255
{
	DDRD = 0xFF;
	unsigned char i;
	UART_init(); // initialise UART
	stdout = fdevopen(uart_putchar, NULL);
	while (1) {
 12c:	e1 cf       	rjmp	.-62     	; 0xf0 <main+0x1e>

0000012e <fdevopen>:
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	31 f4       	brne	.+12     	; 0x146 <fdevopen+0x18>
 13a:	61 15       	cp	r22, r1
 13c:	71 05       	cpc	r23, r1
 13e:	19 f4       	brne	.+6      	; 0x146 <fdevopen+0x18>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	3a c0       	rjmp	.+116    	; 0x1ba <fdevopen+0x8c>
 146:	8b 01       	movw	r16, r22
 148:	ec 01       	movw	r28, r24
 14a:	6e e0       	ldi	r22, 0x0E	; 14
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 12 01 	call	0x224	; 0x224 <calloc>
 156:	fc 01       	movw	r30, r24
 158:	89 2b       	or	r24, r25
 15a:	91 f3       	breq	.-28     	; 0x140 <fdevopen+0x12>
 15c:	80 e8       	ldi	r24, 0x80	; 128
 15e:	83 83       	std	Z+3, r24	; 0x03
 160:	01 15       	cp	r16, r1
 162:	11 05       	cpc	r17, r1
 164:	71 f0       	breq	.+28     	; 0x182 <fdevopen+0x54>
 166:	13 87       	std	Z+11, r17	; 0x0b
 168:	02 87       	std	Z+10, r16	; 0x0a
 16a:	81 e8       	ldi	r24, 0x81	; 129
 16c:	83 83       	std	Z+3, r24	; 0x03
 16e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 172:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x1>
 176:	89 2b       	or	r24, r25
 178:	21 f4       	brne	.+8      	; 0x182 <fdevopen+0x54>
 17a:	f0 93 73 00 	sts	0x0073, r31	; 0x800073 <__data_end+0x1>
 17e:	e0 93 72 00 	sts	0x0072, r30	; 0x800072 <__data_end>
 182:	20 97       	sbiw	r28, 0x00	; 0
 184:	c9 f0       	breq	.+50     	; 0x1b8 <fdevopen+0x8a>
 186:	d1 87       	std	Z+9, r29	; 0x09
 188:	c0 87       	std	Z+8, r28	; 0x08
 18a:	83 81       	ldd	r24, Z+3	; 0x03
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	83 83       	std	Z+3, r24	; 0x03
 190:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end+0x2>
 194:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x3>
 198:	89 2b       	or	r24, r25
 19a:	71 f4       	brne	.+28     	; 0x1b8 <fdevopen+0x8a>
 19c:	f0 93 75 00 	sts	0x0075, r31	; 0x800075 <__data_end+0x3>
 1a0:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <__data_end+0x2>
 1a4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <__data_end+0x4>
 1a8:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <__data_end+0x5>
 1ac:	89 2b       	or	r24, r25
 1ae:	21 f4       	brne	.+8      	; 0x1b8 <fdevopen+0x8a>
 1b0:	f0 93 77 00 	sts	0x0077, r31	; 0x800077 <__data_end+0x5>
 1b4:	e0 93 76 00 	sts	0x0076, r30	; 0x800076 <__data_end+0x4>
 1b8:	cf 01       	movw	r24, r30
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	08 95       	ret

000001c4 <puts>:
 1c4:	0f 93       	push	r16
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__data_end+0x2>
 1d0:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__data_end+0x3>
 1d4:	23 81       	ldd	r18, Z+3	; 0x03
 1d6:	21 ff       	sbrs	r18, 1
 1d8:	1b c0       	rjmp	.+54     	; 0x210 <puts+0x4c>
 1da:	8c 01       	movw	r16, r24
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	f8 01       	movw	r30, r16
 1e2:	81 91       	ld	r24, Z+
 1e4:	8f 01       	movw	r16, r30
 1e6:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <__data_end+0x2>
 1ea:	70 91 75 00 	lds	r23, 0x0075	; 0x800075 <__data_end+0x3>
 1ee:	db 01       	movw	r26, r22
 1f0:	18 96       	adiw	r26, 0x08	; 8
 1f2:	ed 91       	ld	r30, X+
 1f4:	fc 91       	ld	r31, X
 1f6:	19 97       	sbiw	r26, 0x09	; 9
 1f8:	88 23       	and	r24, r24
 1fa:	31 f0       	breq	.+12     	; 0x208 <puts+0x44>
 1fc:	09 95       	icall
 1fe:	89 2b       	or	r24, r25
 200:	79 f3       	breq	.-34     	; 0x1e0 <puts+0x1c>
 202:	df ef       	ldi	r29, 0xFF	; 255
 204:	cf ef       	ldi	r28, 0xFF	; 255
 206:	ec cf       	rjmp	.-40     	; 0x1e0 <puts+0x1c>
 208:	8a e0       	ldi	r24, 0x0A	; 10
 20a:	09 95       	icall
 20c:	89 2b       	or	r24, r25
 20e:	19 f0       	breq	.+6      	; 0x216 <puts+0x52>
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	9f ef       	ldi	r25, 0xFF	; 255
 214:	02 c0       	rjmp	.+4      	; 0x21a <puts+0x56>
 216:	8d 2f       	mov	r24, r29
 218:	9c 2f       	mov	r25, r28
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <calloc>:
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	86 9f       	mul	r24, r22
 22e:	80 01       	movw	r16, r0
 230:	87 9f       	mul	r24, r23
 232:	10 0d       	add	r17, r0
 234:	96 9f       	mul	r25, r22
 236:	10 0d       	add	r17, r0
 238:	11 24       	eor	r1, r1
 23a:	c8 01       	movw	r24, r16
 23c:	0e 94 2e 01 	call	0x25c	; 0x25c <malloc>
 240:	ec 01       	movw	r28, r24
 242:	00 97       	sbiw	r24, 0x00	; 0
 244:	29 f0       	breq	.+10     	; 0x250 <calloc+0x2c>
 246:	a8 01       	movw	r20, r16
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	0e 94 4f 02 	call	0x49e	; 0x49e <memset>
 250:	ce 01       	movw	r24, r28
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <malloc>:
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	91 05       	cpc	r25, r1
 268:	10 f4       	brcc	.+4      	; 0x26e <malloc+0x12>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__flp>
 272:	f0 91 7b 00 	lds	r31, 0x007B	; 0x80007b <__flp+0x1>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	a0 e0       	ldi	r26, 0x00	; 0
 27c:	b0 e0       	ldi	r27, 0x00	; 0
 27e:	30 97       	sbiw	r30, 0x00	; 0
 280:	19 f1       	breq	.+70     	; 0x2c8 <malloc+0x6c>
 282:	40 81       	ld	r20, Z
 284:	51 81       	ldd	r21, Z+1	; 0x01
 286:	02 81       	ldd	r16, Z+2	; 0x02
 288:	13 81       	ldd	r17, Z+3	; 0x03
 28a:	48 17       	cp	r20, r24
 28c:	59 07       	cpc	r21, r25
 28e:	c8 f0       	brcs	.+50     	; 0x2c2 <malloc+0x66>
 290:	84 17       	cp	r24, r20
 292:	95 07       	cpc	r25, r21
 294:	69 f4       	brne	.+26     	; 0x2b0 <malloc+0x54>
 296:	10 97       	sbiw	r26, 0x00	; 0
 298:	31 f0       	breq	.+12     	; 0x2a6 <malloc+0x4a>
 29a:	12 96       	adiw	r26, 0x02	; 2
 29c:	0c 93       	st	X, r16
 29e:	12 97       	sbiw	r26, 0x02	; 2
 2a0:	13 96       	adiw	r26, 0x03	; 3
 2a2:	1c 93       	st	X, r17
 2a4:	27 c0       	rjmp	.+78     	; 0x2f4 <malloc+0x98>
 2a6:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__flp>
 2aa:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <__flp+0x1>
 2ae:	22 c0       	rjmp	.+68     	; 0x2f4 <malloc+0x98>
 2b0:	21 15       	cp	r18, r1
 2b2:	31 05       	cpc	r19, r1
 2b4:	19 f0       	breq	.+6      	; 0x2bc <malloc+0x60>
 2b6:	42 17       	cp	r20, r18
 2b8:	53 07       	cpc	r21, r19
 2ba:	18 f4       	brcc	.+6      	; 0x2c2 <malloc+0x66>
 2bc:	9a 01       	movw	r18, r20
 2be:	bd 01       	movw	r22, r26
 2c0:	ef 01       	movw	r28, r30
 2c2:	df 01       	movw	r26, r30
 2c4:	f8 01       	movw	r30, r16
 2c6:	db cf       	rjmp	.-74     	; 0x27e <malloc+0x22>
 2c8:	21 15       	cp	r18, r1
 2ca:	31 05       	cpc	r19, r1
 2cc:	f9 f0       	breq	.+62     	; 0x30c <malloc+0xb0>
 2ce:	28 1b       	sub	r18, r24
 2d0:	39 0b       	sbc	r19, r25
 2d2:	24 30       	cpi	r18, 0x04	; 4
 2d4:	31 05       	cpc	r19, r1
 2d6:	80 f4       	brcc	.+32     	; 0x2f8 <malloc+0x9c>
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	9b 81       	ldd	r25, Y+3	; 0x03
 2dc:	61 15       	cp	r22, r1
 2de:	71 05       	cpc	r23, r1
 2e0:	21 f0       	breq	.+8      	; 0x2ea <malloc+0x8e>
 2e2:	fb 01       	movw	r30, r22
 2e4:	93 83       	std	Z+3, r25	; 0x03
 2e6:	82 83       	std	Z+2, r24	; 0x02
 2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <malloc+0x96>
 2ea:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__flp+0x1>
 2ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__flp>
 2f2:	fe 01       	movw	r30, r28
 2f4:	32 96       	adiw	r30, 0x02	; 2
 2f6:	44 c0       	rjmp	.+136    	; 0x380 <malloc+0x124>
 2f8:	fe 01       	movw	r30, r28
 2fa:	e2 0f       	add	r30, r18
 2fc:	f3 1f       	adc	r31, r19
 2fe:	81 93       	st	Z+, r24
 300:	91 93       	st	Z+, r25
 302:	22 50       	subi	r18, 0x02	; 2
 304:	31 09       	sbc	r19, r1
 306:	39 83       	std	Y+1, r19	; 0x01
 308:	28 83       	st	Y, r18
 30a:	3a c0       	rjmp	.+116    	; 0x380 <malloc+0x124>
 30c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__brkval>
 310:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__brkval+0x1>
 314:	23 2b       	or	r18, r19
 316:	41 f4       	brne	.+16     	; 0x328 <malloc+0xcc>
 318:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 31c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 320:	30 93 79 00 	sts	0x0079, r19	; 0x800079 <__brkval+0x1>
 324:	20 93 78 00 	sts	0x0078, r18	; 0x800078 <__brkval>
 328:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 32c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 330:	21 15       	cp	r18, r1
 332:	31 05       	cpc	r19, r1
 334:	41 f4       	brne	.+16     	; 0x346 <malloc+0xea>
 336:	2d b7       	in	r18, 0x3d	; 61
 338:	3e b7       	in	r19, 0x3e	; 62
 33a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 33e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 342:	24 1b       	sub	r18, r20
 344:	35 0b       	sbc	r19, r21
 346:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <__brkval>
 34a:	f0 91 79 00 	lds	r31, 0x0079	; 0x800079 <__brkval+0x1>
 34e:	e2 17       	cp	r30, r18
 350:	f3 07       	cpc	r31, r19
 352:	a0 f4       	brcc	.+40     	; 0x37c <malloc+0x120>
 354:	2e 1b       	sub	r18, r30
 356:	3f 0b       	sbc	r19, r31
 358:	28 17       	cp	r18, r24
 35a:	39 07       	cpc	r19, r25
 35c:	78 f0       	brcs	.+30     	; 0x37c <malloc+0x120>
 35e:	ac 01       	movw	r20, r24
 360:	4e 5f       	subi	r20, 0xFE	; 254
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	24 17       	cp	r18, r20
 366:	35 07       	cpc	r19, r21
 368:	48 f0       	brcs	.+18     	; 0x37c <malloc+0x120>
 36a:	4e 0f       	add	r20, r30
 36c:	5f 1f       	adc	r21, r31
 36e:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <__brkval+0x1>
 372:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <__brkval>
 376:	81 93       	st	Z+, r24
 378:	91 93       	st	Z+, r25
 37a:	02 c0       	rjmp	.+4      	; 0x380 <malloc+0x124>
 37c:	e0 e0       	ldi	r30, 0x00	; 0
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	cf 01       	movw	r24, r30
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	08 95       	ret

0000038c <free>:
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	09 f4       	brne	.+2      	; 0x396 <free+0xa>
 394:	81 c0       	rjmp	.+258    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 396:	fc 01       	movw	r30, r24
 398:	32 97       	sbiw	r30, 0x02	; 2
 39a:	13 82       	std	Z+3, r1	; 0x03
 39c:	12 82       	std	Z+2, r1	; 0x02
 39e:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__flp>
 3a2:	b0 91 7b 00 	lds	r27, 0x007B	; 0x80007b <__flp+0x1>
 3a6:	10 97       	sbiw	r26, 0x00	; 0
 3a8:	81 f4       	brne	.+32     	; 0x3ca <free+0x3e>
 3aa:	20 81       	ld	r18, Z
 3ac:	31 81       	ldd	r19, Z+1	; 0x01
 3ae:	82 0f       	add	r24, r18
 3b0:	93 1f       	adc	r25, r19
 3b2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__brkval>
 3b6:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__brkval+0x1>
 3ba:	28 17       	cp	r18, r24
 3bc:	39 07       	cpc	r19, r25
 3be:	51 f5       	brne	.+84     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3c0:	f0 93 79 00 	sts	0x0079, r31	; 0x800079 <__brkval+0x1>
 3c4:	e0 93 78 00 	sts	0x0078, r30	; 0x800078 <__brkval>
 3c8:	67 c0       	rjmp	.+206    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 3ca:	ed 01       	movw	r28, r26
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	ce 17       	cp	r28, r30
 3d2:	df 07       	cpc	r29, r31
 3d4:	40 f4       	brcc	.+16     	; 0x3e6 <free+0x5a>
 3d6:	4a 81       	ldd	r20, Y+2	; 0x02
 3d8:	5b 81       	ldd	r21, Y+3	; 0x03
 3da:	9e 01       	movw	r18, r28
 3dc:	41 15       	cp	r20, r1
 3de:	51 05       	cpc	r21, r1
 3e0:	f1 f0       	breq	.+60     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e2:	ea 01       	movw	r28, r20
 3e4:	f5 cf       	rjmp	.-22     	; 0x3d0 <free+0x44>
 3e6:	d3 83       	std	Z+3, r29	; 0x03
 3e8:	c2 83       	std	Z+2, r28	; 0x02
 3ea:	40 81       	ld	r20, Z
 3ec:	51 81       	ldd	r21, Z+1	; 0x01
 3ee:	84 0f       	add	r24, r20
 3f0:	95 1f       	adc	r25, r21
 3f2:	c8 17       	cp	r28, r24
 3f4:	d9 07       	cpc	r29, r25
 3f6:	59 f4       	brne	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f8:	88 81       	ld	r24, Y
 3fa:	99 81       	ldd	r25, Y+1	; 0x01
 3fc:	84 0f       	add	r24, r20
 3fe:	95 1f       	adc	r25, r21
 400:	02 96       	adiw	r24, 0x02	; 2
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24
 406:	8a 81       	ldd	r24, Y+2	; 0x02
 408:	9b 81       	ldd	r25, Y+3	; 0x03
 40a:	93 83       	std	Z+3, r25	; 0x03
 40c:	82 83       	std	Z+2, r24	; 0x02
 40e:	21 15       	cp	r18, r1
 410:	31 05       	cpc	r19, r1
 412:	29 f4       	brne	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 414:	f0 93 7b 00 	sts	0x007B, r31	; 0x80007b <__flp+0x1>
 418:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <__flp>
 41c:	3d c0       	rjmp	.+122    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 41e:	e9 01       	movw	r28, r18
 420:	fb 83       	std	Y+3, r31	; 0x03
 422:	ea 83       	std	Y+2, r30	; 0x02
 424:	49 91       	ld	r20, Y+
 426:	59 91       	ld	r21, Y+
 428:	c4 0f       	add	r28, r20
 42a:	d5 1f       	adc	r29, r21
 42c:	ec 17       	cp	r30, r28
 42e:	fd 07       	cpc	r31, r29
 430:	61 f4       	brne	.+24     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 432:	80 81       	ld	r24, Z
 434:	91 81       	ldd	r25, Z+1	; 0x01
 436:	84 0f       	add	r24, r20
 438:	95 1f       	adc	r25, r21
 43a:	02 96       	adiw	r24, 0x02	; 2
 43c:	e9 01       	movw	r28, r18
 43e:	99 83       	std	Y+1, r25	; 0x01
 440:	88 83       	st	Y, r24
 442:	82 81       	ldd	r24, Z+2	; 0x02
 444:	93 81       	ldd	r25, Z+3	; 0x03
 446:	9b 83       	std	Y+3, r25	; 0x03
 448:	8a 83       	std	Y+2, r24	; 0x02
 44a:	e0 e0       	ldi	r30, 0x00	; 0
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	12 96       	adiw	r26, 0x02	; 2
 450:	8d 91       	ld	r24, X+
 452:	9c 91       	ld	r25, X
 454:	13 97       	sbiw	r26, 0x03	; 3
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	19 f0       	breq	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45a:	fd 01       	movw	r30, r26
 45c:	dc 01       	movw	r26, r24
 45e:	f7 cf       	rjmp	.-18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 460:	8d 91       	ld	r24, X+
 462:	9c 91       	ld	r25, X
 464:	11 97       	sbiw	r26, 0x01	; 1
 466:	9d 01       	movw	r18, r26
 468:	2e 5f       	subi	r18, 0xFE	; 254
 46a:	3f 4f       	sbci	r19, 0xFF	; 255
 46c:	82 0f       	add	r24, r18
 46e:	93 1f       	adc	r25, r19
 470:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__brkval>
 474:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__brkval+0x1>
 478:	28 17       	cp	r18, r24
 47a:	39 07       	cpc	r19, r25
 47c:	69 f4       	brne	.+26     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 47e:	30 97       	sbiw	r30, 0x00	; 0
 480:	29 f4       	brne	.+10     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 482:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__flp+0x1>
 486:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__flp>
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48c:	13 82       	std	Z+3, r1	; 0x03
 48e:	12 82       	std	Z+2, r1	; 0x02
 490:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <__brkval+0x1>
 494:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <__brkval>
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <memset>:
 49e:	dc 01       	movw	r26, r24
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <memset+0x6>
 4a2:	6d 93       	st	X+, r22
 4a4:	41 50       	subi	r20, 0x01	; 1
 4a6:	50 40       	sbci	r21, 0x00	; 0
 4a8:	e0 f7       	brcc	.-8      	; 0x4a2 <memset+0x4>
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
